#!/usr/bin/python3

# =============================================================================
#
#    gnome-gocryptfs - GNOME keyring and auto-mount integration of gocryptfs folders.
#    Copyright (c) 2020 Colin Jermain <cjermain@gmail.com>
#                  2010 Oben Sonne <obensonne@googlemail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# =============================================================================

import getpass
import os
import os.path
import argparse
import subprocess
import sys
from collections import defaultdict

from xdg.DesktopEntry import DesktopEntry
from xdg.BaseDirectory import xdg_config_home

import gi
gi.require_version('Secret', '1')
from gi.repository import Secret

__version__ = "0.3"

TEST = "GNOME_GOCRYPTFS_TEST" in os.environ


class LockedKeyring(Exception):
    pass


class Keyring(object):
    """The Keyring object wraps the gi.repository.Secret library provided by
    libsecret for GNOME. It uses a specific schema for the purpose of storing
    keys for gnome-gocrpytfs, and provides convenience methods for adding,
    editing, finding, and removing these keys in the keyring.
    """

    COLLECTION = Secret.COLLECTION_DEFAULT

    SCHEMA = Secret.Schema.new(
        "gnome-gocryptfs.Store",
        Secret.SchemaFlags.NONE,
        {
            "gnome-gocryptfs": Secret.SchemaAttributeType.STRING,
            "gocryptfs-config": Secret.SchemaAttributeType.STRING,
            "gocryptfs-path": Secret.SchemaAttributeType.STRING,
            "mount-point": Secret.SchemaAttributeType.STRING,
            "auto-mount": Secret.SchemaAttributeType.STRING,
        }
    )

    def __init__(self):
        """Constructs a Keyring object which handles setting, editing, and removing
        an item from the keyring. This holds a Service and Collection object with
        libsecret.
        """
        self.service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)
        self.collection = Secret.Collection.for_alias_sync(
            self.service,
            self.COLLECTION,
            Secret.CollectionFlags.LOAD_ITEMS,
        )
        if self.collection.get_locked():
            raise LockedKeyring("The {} keyring is locked".format(self.collection.get_label()))

    def default_attributes(self):
        """Returns a dictionary with default attributes that conforms to the
        schema.
        """
        return {
            # TODO: Remove this test patch
            "gnome-gocryptfs": "TEST" if TEST else "",
            "gocryptfs-config": "-",
            "gocryptfs-path": "",
            "mount-point": "",
            "auto-mount": "n",
        }

    def add(self, label, attributes, secret):
        """Adds an item to the keyring.

        :param label: String name of the key
        :param attributes: Dictionary of non-secret lookup information
        :param secret: String secret key
        """
        Secret.password_store_sync(self.SCHEMA, attributes, self.COLLECTION, label, secret)

    def edit(self, item, attributes=None, secret=None):
        """Edit an existing item with new attributes or secret if provided.
        Only attributes that are provided will be changed.

        :param item: Secret.Item object
        :param attributes: Dictionary of non-secret lookup information
        :param secret: String secret key
        """
        if attributes is not None:
            # Update the current values
            current_attributes = item.get_attributes()
            current_attributes.update(attributes)
            item.set_attributes_sync(self.SCHEMA, current_attributes)
        if secret is not None:
            # Update the password
            secret_value = Secret.Value.new(secret, len(secret), "text/plain")
            item.set_secret_sync(secret_value)

    def remove(self, item):
        """Removes an existing item from the keyring.

        :param item: Secret.Item object
        """
        item.delete_sync()

    def find(self, attributes=None):
        """Returns a list of items in the keyring that match the attributes.

        :param attributes: Dictionary of non-secret lookup information
        """
        if attributes is None:
            attributes = {}

        # TODO: Remove this test patch
        attributes["gnome-gocryptfs"] = "TEST" if TEST else ""
        items = self.collection.search_sync(
            self.SCHEMA,
            attributes,
            Secret.SearchFlags.LOAD_SECRETS | Secret.SearchFlags.ALL
        )

        return sorted(items, key=lambda x: x.get_attributes()["mount-point"])

    def find_keys_for_path(self, path, attributes=None):
        """Returns a list of items in the keyring that match either the
        mount-point or gocryptfs-path.

        :param path: String path
        :param attributes: Additional attributes to consider
        """
        if attributes is None:
            attributes = {}

        # TODO: Remove this test patch
        attributes["gnome-gocryptfs"] = "TEST" if TEST else ""

        search_attributes = attributes.copy()
        search_attributes["gocryptfs-path"] = path

        items = self.find(search_attributes)

        search_attributes = attributes.copy()
        search_attributes["mount-point"] = path

        items.extend(self.find(search_attributes))

        return sorted(items, key=lambda x: x.get_attributes()["mount-point"])


# Provide access to the default GNOME keyring
KEYRING = Keyring()

MSG_NO_MATCH = ("No matching gocryptfs items in keyring.\n"
                "Use the list command to show available items or "
                "the add command to add items.")

MSG_NO_GOCRYPTFS_PATH = ("No gocryptfs at given path (or the gocryptfs config file "
                     "location is invalid)")

DESCRIPTION = """Painlessly mount and manage gocryptfs folders using GNOME's
keyring."""

EPILOG = """This tool stores gocryptfs paths,
corresponding mount points as well as passwords in the GNOME keyring and
optionally mounts gocryptfs paths automatically on login to a GNOME session (works
only if gnome-gocryptfs is installed in the system path, at /usr/bin or
/usr/local/bin).
"""

# bitwise or'able return codes
RC_OK = 0
RC_MOUNT_FAILED = 1
RC_KEYRING_LOCKED = 2
RC_UNKNOWN_ITEM = 4
RC_INVALID_PATH = 8
RC_MOUNT_POINT_IN_USE = 16
RC_UNMOUNT_FAILED = 32

# =============================================================================
# helper
# =============================================================================


def _exit(rc):
    """Exit with additional check if autostart file is still needed."""

    if rc != RC_KEYRING_LOCKED: # getting items requires an unlocked keyring
        _autostart(KEYRING.find({'auto-mount': 'y'}))
    sys.exit(rc)

def _proceed(msg, proceed=None):
    print("Warning: %s" % msg)
    proceed = proceed or input("Proceed [y/N]: ") or "n"
    if proceed.strip()[0].lower() != "y":
        _exit(2)

def _pathify(path):
    if path is None:
        return None
    path = os.path.expanduser(path)
    path = os.path.expandvars(path)
    path = os.path.abspath(path)
    path = os.path.realpath(path)
    return path

def _config_commands(config):
    """Returns a list of additional commands needed to handle the
    configuration. If the config is '-' then it returns an empty list.

    :param config: String path to config file or '-'
    """
    if config != '-' and os.path.exists(config):
        return ["-config", _pathify(config)]
    else:
        return []

def _is_mounted(mpoint):
    """Check of something is mounted at given mount point."""

    p = subprocess.Popen(["mount"], stdout=subprocess.PIPE)
    mount = p.communicate()[0]
    lines = mount.decode().strip('\n').split('\n')
    points = map(lambda line: line.split()[2], lines)
    points = [os.path.abspath(p) for p in points]
    return os.path.abspath(mpoint) in points

def _is_gocryptfs(path, config):
    """Check if 'path' points to an gocryptfs directory."""

    command = ["gocryptfs", "-info", path]
    command[1:1] = _config_commands(config)

    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.communicate()
    return p.returncode == 0

def _autostart(enable):
    """Set up XDG autostart file."""

    if TEST:
        fname = os.path.join(os.path.curdir, "autostart.desktop")
    else:
        fname = os.path.join(xdg_config_home, "autostart", "gnome-gocryptfs.desktop")

    if not enable:
        if os.path.exists(fname):
            os.remove(fname)
        return

    content = {
        "Exec": "gnome-gocryptfs mount --auto",
        "Name": "Mount gocryptfs",
        "Comment": "Mount gocryptfs folders configured in GNOME's keyring",
        "Icon": "folder",
        "Version": "1.0",
        "X-GNOME-Autostart-enabled": "true"
    }

    entry = DesktopEntry(filename=fname)
    for key, value in content.items():
        entry.set(key, value)
    entry.validate()
    entry.write()

# =============================================================================
# actions
# =============================================================================


def list_items(args):
    """List gocryptfs items in keyring.
    """
    path = _pathify(args.path)

    if path is not None:
        items = KEYRING.find_keys_for_path(path)
    else:
        items = KEYRING.find()

    if not items and path:
        print(MSG_NO_MATCH)
        return RC_UNKNOWN_ITEM

    for i, item in enumerate(items):
        if i > 0: print()

        attributes = item.get_attributes()
        attributes['auto-mount'] = 'yes' if attributes['auto-mount'] == 'y' else 'no'
        if attributes['gocryptfs-config'] == '-':
            attributes['gocryptfs-config'] = 'inline'
        attributes['mounted'] = 'yes' if _is_mounted(attributes['mount-point']) else 'no'

        message =  "STASH     : {gocryptfs-path}\n"
        message += "MOUNT     : {mount-point}\n"
        message += "CONFIG    : {gocryptfs-config}\n"
        message += "AUTOMOUNT : {auto-mount}\n"
        message += "MOUNTED   : {mounted}"

        print(message.format_map(attributes))

    return RC_OK

def add_item(args):
    """Add new gocryptfs item to keyring.
    """

    path = _pathify(args.path)
    mpoint = _pathify(args.mount_path)

    if not os.path.isdir(mpoint):
        _proceed("mount point is not a directory", args.proceed)
    if KEYRING.find({'mount-point': mpoint}):
        _proceed("mount point already in keyring", args.proceed)

    config = args.config or input("gocryptfs config file [-]: ") or "-"

    if not _is_gocryptfs(path, config):
        _proceed(MSG_NO_GOCRYPTFS_PATH, args.proceed)

    secret = args.password or getpass.getpass("gocryptfs password: ")
    amount = args.auto_mount or input("Mount at login [Y/n]: ") or "y"
    amount = amount.strip()[0].lower() == "y" and "y" or "n"

    attributes = KEYRING.default_attributes()
    attributes.update({
        "gocryptfs-path": path,
        "mount-point": mpoint,
        "auto-mount": amount,
        "gocryptfs-config": config,
    })

    label = "gocryptfs mount at %s" % mpoint
    KEYRING.add(label, attributes, secret)

    return RC_OK

def edit_item(args):
    """Edit gocryptfs item in keyring.

    :param mpoint: Mount point path
    """
    mpoint = _pathify(args.mount_path)

    # Find all matching endpoints
    edits = KEYRING.find({'mount-point': mpoint})

    if not edits:
        print(MSG_NO_MATCH)
        return RC_UNKNOWN_ITEM

    # Map the existing mount points to their object IDs
    items = KEYRING.find()
    mount_point_to_ids = defaultdict(set)
    for item in items:
        attributes = item.get_attributes()
        mount_point_to_ids[attributes["mount-point"]].add(id(item))

    for item in edits:

        # get item data
        attributes = item.get_attributes()
        attributes["gocryptfs-path"] = _pathify(
            args.path or
            input("gocryptfs path [%s]: " % attributes["gocryptfs-path"]) or
            attributes["gocryptfs-path"]
        )
        attributes["gocryptfs-config"] = (
            args.config or
            input("gocryptfs config file [%s] (`-`: default): " % attributes["gocryptfs-config"]) or
            attributes["gocryptfs-config"]
        )
        attributes["mount-point"] = _pathify(
            args.mount or
            input("Mount point [%s]: " % attributes["mount-point"]) or
            attributes["mount-point"]
        )
        secret = (
            args.password or
            getpass.getpass("Password [**current**]: ") or
            None
        )
        attributes["auto-mount"] = (
            args.auto_mount or
            input("Mount at login [%s]: " % ("Y/n" if attributes["auto-mount"] == "y" else "y/N")) or
            attributes["auto-mount"]
        )
        attributes["auto-mount"] = (
            "y" if attributes["auto-mount"].strip()[0].lower() == "y" else "n"

        )

        # check item data
        has_conflicting_mount_point = (
            attributes["mount-point"] in mount_point_to_ids and
            id(item) not in mount_point_to_ids[attributes["mount-point"]]
        )
        if has_conflicting_mount_point:
            _proceed("mount point already in use", args.proceed)
        if not _is_gocryptfs(attributes["gocryptfs-path"], attributes["gocryptfs-config"]):
            _proceed(MSG_NO_GOCRYPTFS_PATH, args.proceed)
        if not os.path.isdir(mpoint):
            _proceed("mount point is not a directory", args.proceed)

        # update item data
        KEYRING.edit(item, attributes=attributes, secret=secret)

    return RC_OK

def remove_item(args):
    """Remove gocryptfs item from keyring."""

    mpoint = _pathify(args.path)

    items = KEYRING.find({'mount-point': mpoint})

    if not items:
        print(MSG_NO_MATCH)
        return RC_UNKNOWN_ITEM

    for item in items:
        KEYRING.remove(item)

    return RC_OK

def mount_items(args):
    """Mount selected items.

    If `path` is set, mount only those items where the gocryptfs path or mount
    point equals `path`. If `auto` is True, mount only those items where
    auto-mount is set to 'y'.

    Return true if all items have been mounted successfully and false
    otherwise.

    """
    path = _pathify(args.path)

    attributes = {'auto-mount': 'y'} if args.auto else {}

    if path is None:
        items = KEYRING.find(attributes)
    else:
        items = KEYRING.find_keys_for_path(path, attributes)

    if not items and path:
        print(MSG_NO_MATCH)
        return RC_UNKNOWN_ITEM

    rc = 0

    for item in items:
        attributes = item.get_attributes()

        msg = "Mounting {gocryptfs-path} at {mount-point}: ".format_map(attributes)

        if _is_mounted(attributes["mount-point"]):
            msg += "Mount point already in use"
            rc |= RC_MOUNT_POINT_IN_USE
        elif not os.path.isdir(attributes["mount-point"]):
            msg += "Mount point does not exist or is not a directory"
            rc |= RC_INVALID_PATH
        else:
            command = [
                "gocryptfs", "-o", "nonempty",
                attributes["gocryptfs-path"],
                attributes["mount-point"]
            ]
            command[1:1] = _config_commands(attributes["gocryptfs-config"])

            p = subprocess.Popen(
                command,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            p.communicate(input=b"%s\n" % item.get_secret().get())
            msg += p.returncode and "FAILED" or "OK"
            rc |= 0 if p.returncode == os.EX_OK else RC_MOUNT_FAILED

        print(msg)

    return rc

def unmount_items(args):
    """Unmounts the all managed folders or a specific folder if specified."""

    path = _pathify(args.path)

    if path is None:
        items = KEYRING.find()
    else:
        items = KEYRING.find_keys_for_path(path)

    if not items and path:
        print(MSG_NO_MATCH)
        return RC_UNKNOWN_ITEM

    rc = 0

    for item in items:
        attributes = item.get_attributes()

        msg = "Unmounting {gocryptfs-path} at {mount-point}: ".format_map(attributes)

        if not _is_mounted(attributes["mount-point"]):
            continue
        if not os.path.isdir(attributes["mount-point"]):
            msg += "Mount point does not exist or is not a directory"
            rc |= RC_INVALID_PATH
        else:
            command = ["fusermount", "-u", attributes["mount-point"]]

            p = subprocess.Popen(command, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
            p.communicate()
            msg += p.returncode and "FAILED" or "OK"
            rc |= 0 if p.returncode == os.EX_OK else RC_UNMOUNT_FAILED

        print(msg)

    return rc


def _parse_args():
    """Parse command line arguments."""

    parser = argparse.ArgumentParser(description=DESCRIPTION, epilog=EPILOG)
    parser.add_argument('--version', action='version', version=__version__)
    parser.set_defaults(func=None)

    subparsers = parser.add_subparsers()

    parser_list = subparsers.add_parser("list", help="List all gocryptfs items stored in the keyring")
    parser_list.add_argument('--path', help="Path to gocryptfs or mount folder", type=str, default=None)
    parser_list.set_defaults(func=list_items)

    parser_mount = subparsers.add_parser("mount", help="Mount all or selected paths stored in the keyring")
    parser_mount.add_argument('path', help="Path to gocryptfs or mount folder", nargs='?', type=str, default=None)
    parser_mount.add_argument("--auto", help="Mount all auto-mount paths stored in the keyring", action='store_true', default=False)
    parser_mount.set_defaults(func=mount_items)

    parser_unmount = subparsers.add_parser("unmount", help="Unmount all or selected paths stored in the keyring")
    parser_unmount.add_argument('path', help="Path to gocryptfs or mount folder", nargs="?", type=str, default=None)
    parser_unmount.set_defaults(func=unmount_items)

    parser_add = subparsers.add_parser("add", help="Add a new gocryptfs path to the keyring")
    parser_add.add_argument("path", help="Path to encrypted gocryptfs folder")
    parser_add.add_argument("mount_path", help="Path to unencrypted folder")
    parser_add.add_argument("--config", help="Path to external configuration", type=str, default=None)
    parser_add.add_argument("--password", help="Password for gocryptfs folder", type=str, default=None)
    parser_add.add_argument("--proceed", help="Proceed without being prompted", type=str, default=None)
    parser_add.add_argument("--auto-mount", help="Automatically mount", type=str, default=None)
    parser_add.set_defaults(func=add_item)

    parser_edit = subparsers.add_parser("edit", help="Edit a gocryptfs item in the keyring")
    parser_edit.add_argument("mount_path", help="Path to unencrypted mount folder")
    parser_edit.add_argument("--path", help="New path to encrypted gocryptfs folder", type=str, default=None)
    parser_edit.add_argument("--mount", help="New path to unencrypted mount folder", type=str, default=None)
    parser_edit.add_argument("--config", help="Path to external configuration", type=str, default=None)
    parser_edit.add_argument("--password", help="Password for gocryptfs folder", type=str, default=None)
    parser_edit.add_argument("--proceed", help="Proceed without being prompted", type=str, default=None)
    parser_edit.add_argument("--auto-mount", help="Automatically mount", type=str, default=None)
    parser_edit.set_defaults(func=edit_item)

    parser_remove = subparsers.add_parser("remove", help="Remove a gocryptfs item from the keyring")
    parser_remove.add_argument("path", help="Path to unencrypted mount folder")
    parser_remove.set_defaults(func=remove_item)

    args = parser.parse_args()
    if args.func is None:
        parser.print_help()
        exit(RC_OK)

    return parser.parse_args()


def main():
    try:
        args = _parse_args()
        rc = args.func(args)
    except LockedKeyring:
        rc = RC_KEYRING_LOCKED
    _exit(rc)


if __name__ == '__main__':
    main()
